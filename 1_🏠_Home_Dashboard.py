import streamlit as st
import pandas as pd
from sqlalchemy import text
from db import get_db_engine

# ===================
# Page Config
# ===================
st.set_page_config(page_title="🏠 YTD Summary", layout="wide")
st.title("📊 YTD Business Summary")
st.markdown("### Business overview from Jan 1st to today")

# ===================
# Load Data
# ===================
def load_order_data():
    engine = get_db_engine()
    query = """
        SELECT * FROM order_confirmation_full_looker_view
        WHERE invoiced_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')
              AND invoiced_date <= CURDATE()
    """
    return pd.read_sql(text(query), engine)

def load_kpi_data():
    engine = get_db_engine()
    query = """
        SELECT * FROM sales_report_by_kpi_center_flat_looker_view
        WHERE inv_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')
              AND inv_date <= CURDATE()
    """
    return pd.read_sql(text(query), engine)

# ===================
# Cache & Prep
# ===================
@st.cache_data(ttl=3600)
def get_summary_data():
    oc_df = load_order_data()
    kpi_df = load_kpi_data()
    return oc_df, kpi_df

oc_df, kpi_df = get_summary_data()

# ===================
# Sidebar Option
# ===================
st.sidebar.header("Display Options")
exclude_internal = st.sidebar.checkbox("🚫 Exclude INTERNAL Revenue (keep GP)", value=True)

if exclude_internal:
    revenue_df = kpi_df[kpi_df["kpi_type"] != "INTERNAL"].copy()
else:
    revenue_df = kpi_df.copy()

# ===================
# Main KPI Section
# ===================
total_revenue = revenue_df["sales_by_kpi_center_usd"].sum()
total_gp = kpi_df["gross_profit_by_kpi_center_usd"].sum()
gp_percent = round((total_gp / total_revenue) * 100, 2) if total_revenue else 0

col1, col2, col3 = st.columns(3)
col1.metric("🧾 Total Revenue (YTD)", f"{total_revenue:,.0f} USD")
col2.metric("💰 Gross Profit (YTD)", f"{total_gp:,.0f} USD")
col3.metric("📈 Gross Profit %", f"{gp_percent}%")

st.markdown("---")

# ===================
# Revenue by Month
# ===================
monthly_df = revenue_df.groupby("invoice_month")["sales_by_kpi_center_usd"].sum().reset_index()
monthly_df = monthly_df.sort_values(by="invoice_month")
st.subheader("🗓️ Monthly Revenue")
st.bar_chart(data=monthly_df, x="invoice_month", y="sales_by_kpi_center_usd")

# ===================
# KPI Center Breakdown
# ===================
st.subheader("🔎 KPI Center Breakdown")
kpi_summary = revenue_df.groupby("kpi_center").agg({
    "sales_by_kpi_center_usd": "sum",
    "gross_profit_by_kpi_center_usd": "sum"
}).reset_index()
kpi_summary["gp_percent"] = (kpi_summary["gross_profit_by_kpi_center_usd"] / kpi_summary["sales_by_kpi_center_usd"]) * 100

st.dataframe(kpi_summary.style.format({
    "sales_by_kpi_center_usd": ",.0f",
    "gross_profit_by_kpi_center_usd": ",.0f",
    "gp_percent": "{:.2f}%"
}), use_container_width=True)

# ===================
# Top 80% Customers by GP
# ===================
st.subheader("💼 Top 80% Customers by Gross Profit")
top_cust_df = oc_df.copy()
top_cust_df = top_cust_df.groupby("customer").agg({
    "gross_profit_by_split_usd": "sum",
    "invoiced_amount_usd": "sum"
}).reset_index()
top_cust_df = top_cust_df.sort_values(by="gross_profit_by_split_usd", ascending=False)
top_cust_df["cumulative_percent"] = 100 * top_cust_df["gross_profit_by_split_usd"].cumsum() / top_cust_df["gross_profit_by_split_usd"].sum()
top_80_df = top_cust_df[top_cust_df["cumulative_percent"] <= 80]

top_80_df["gp_percent"] = (top_80_df["gross_profit_by_split_usd"] / top_80_df["invoiced_amount_usd"]) * 100

st.dataframe(top_80_df.style.format({
    "gross_profit_by_split_usd": ",.0f",
    "invoiced_amount_usd": ",.0f",
    "gp_percent": "{:.2f}%"
}), use_container_width=True)

st.markdown("---")
st.caption("Generated by Prostech BI Dashboard | Powered by Streamlit")
